on:
    push:
        branches:
            - main

jobs:
    build:
        runs-on: [ubuntu-latest]
        steps:
            -   uses: actions/checkout@v3
            -   name: Set up JDK 17

                uses: actions/setup-java@v3
                with:
                    java-version: 17
                    distribution: 'temurin'

            -   uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

            -   name: Installing local dependencies
                run: mvn initialize

            -   name: Build project
                run: mvn -U -B package --file pom.xml

            -   name: Archive build artifact
                uses: actions/upload-artifact@v3
                with:
                    name: target
                    path: target

    test:
        needs: build
        runs-on: [ubuntu-latest]
        steps:
            -   uses: actions/checkout@v3
            -   name: Set up JDK 17

                uses: actions/setup-java@v3
                with:
                    java-version: 17
                    distribution: 'temurin'

            -   uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

            -   name: Installing local dependencies
                run: mvn initialize

            -   name: Test project
                run: mvn -B test --file pom.xml

    check-version-is-release:
        needs: [test]
        runs-on: [ubuntu-latest]
        outputs:
            is_release: ${{ steps.check_version.outputs.is_release }}
        steps:
            -   uses: actions/checkout@v3
            -   name: Check if that version is a release (i.e. not a snapshot)
                id: check_version
                run: |
                    declare version=$(cat pom.xml  | grep -i "<version>" | head -n 1 | sed -re 's@[ \t]*.version.(.*)./version.@\1@g' | tr [:upper:] [:lower:])
                    if [[ $version == *"snapshot"* ]]; then echo "is_release=0" >> $GITHUB_OUTPUT; else echo "is_release=1" >> $GITHUB_OUTPUT; fi

    deploy-dev:
        needs: [check-version-is-release]
        if: needs.check-version-is-release.outputs.is_release == 0  # deploy only if the version is a snapshot
        runs-on: [ubuntu-latest]
        steps:
            -   uses: actions/checkout@v3

            -   name: Abort if version isn't snapshot
                run: |
                    declare version=$(cat pom.xml  | grep -i "<version>" | head -n 1 | sed -E 's@[ \t]*.version.(.*)./version.@\1@g')
                    if [[ $version != *"SNAPSHOT"* ]]; then exit 0; fi

            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: 17
                    distribution: 'temurin'

            -   uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

            -   name: Deploy project snapshot
                run: mvn -U -B clean deploy -Dmaven.test.skip=true --file pom.xml -s settings.xml -P snapshot
                env:
                    OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
                    OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}

    deploy-prd:
        needs: [check-version-is-release]
        if: needs.check-version-is-release.outputs.is_release == 1 # deploy only if the version is a release
        runs-on: [ubuntu-latest]
        steps:
            -   uses: actions/checkout@v3

            -   name: Set up JDK 17
                uses: actions/setup-java@v3
                with:
                    java-version: 17
                    distribution: 'temurin'

            -   uses: actions/cache@v3
                with:
                    path: ~/.m2/repository
                    key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}

            -   name: Setup GPG
                run: |
                    echo "$GPG_PRIVATE_KEY" > private.asc
                    gpg --import --batch private.asc
                env:
                    GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}

            -   name: Deploy project
                run: |
                    export GPG_TTY=$(tty)
                    mvn -U -B clean deploy -Dmaven.test.skip=true --file pom.xml -s settings.xml -P release
                env:
                    OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
                    OSSRH_TOKEN: ${{ secrets.OSSRH_TOKEN }}
                    GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

    clean-prd:
        needs: [deploy-prd]
        if: needs.check-version-is-release.outputs.is_release == 1
        runs-on: [ubuntu-latest]
        steps:
            -   uses: geekyeggo/delete-artifact@v2
                with:
                    name: target

    clean-dev:
        needs: [deploy-dev]
        if: needs.check-version-is-release.outputs.is_release == 0
        runs-on: [ubuntu-latest]
        steps:
            -   uses: geekyeggo/delete-artifact@v2
                with:
                    name: target
